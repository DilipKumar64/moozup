generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  firstName      String?
  lastName       String?
  email          String    @unique
  password       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           String?   @default("user")
  status         Boolean   @default(true)
  profilePicture String?
  dateOfBirth    DateTime?
  gender         String?
  addressLine1   String?
  addressLine2   String?
  city           String?
  state          String?
  zipCode        String?
  phoneNumber    String?
  phoneExtension String?
  language       String?
  country        String?
  followersCount Int       @default(0)
  followingCount Int       @default(0)
  reports        Report[]  @relation("UserReports")

  events         Event[]
  // joinedEvents JoinEvent[]
  followers      Follow[]        @relation("followers")
  following      Follow[]        @relation("following")
  // Relations
  eventAttendees EventAttendee[] // Events joined
  createdEvents  Event[]         @relation("CreatedEvents") // Events created
  EventReport    EventReport[]
  EventRSVP      EventRSVP[]
  EventInvite    EventInvite[]

  Session Session[]
}

model EventCategory {
  id           Int     @id @default(autoincrement())
  categoryName String? @db.VarChar(800)
  count        Int?

  events Event[]

  @@map("Event_Cateory") // Corrected typo in table name
}

model Event {
  id                          Int       @id @default(autoincrement())
  title                       String
  eventCategory               String?
  eventName                   String?
  eventDescription            String?   @db.Text
  logo                        String?
  banner                      String?
  eventStartDate              DateTime?
  eventEndDate                DateTime?
  isPrivateEvent              Boolean?  @default(false)
  address1                    String?   @db.Text
  address2                    String?   @db.Text
  city                        String?
  state                       String?
  country                     String?
  zipCode                     String?
  hostOrganizationName        String?
  hostOrganizationDescription String?   @db.Text
  hostWebsiteUrl              String?
  eventUrl                    String?
  isActive                    Boolean?  @default(true)
  isPublished                 Boolean?  @default(false)
  isFreeEvent                 Boolean?  @default(false)
  markDelete                  Boolean?  @default(false)
  dateTimeCreated             DateTime? @default(now())
  createdBy                   Int?
  dateTimeModified            DateTime? @updatedAt
  modifiedBy                  Int?
  sponsorLogoPath             String?

  // Relations
  creatorId          Int
  creator            User                @relation("CreatedEvents", fields: [creatorId], references: [id])
  categoryId         Int?
  category           EventCategory?      @relation(fields: [categoryId], references: [id])
  eventAttendees     EventAttendee[] // Users who joined
  EventReport        EventReport[]
  EventRSVP          EventRSVP[]
  EventInvite        EventInvite[]
  User               User?               @relation(fields: [userId], references: [id])
  userId             Int?
  participationTypes ParticipationType[] // Added relation for participation types
  sponsorTypes       SponsorType[] // Added relation for sponsor types
  exhibitorTypes     ExhibitorType[] // Added relation for exhibitor types
  SessionType        SessionType[] // Added relation for session types
  Session            Session[]
  AwardType          AwardType[]
  AwardedPerson      AwardedPerson[]
}

model EventAttendee {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  @@unique([userId, eventId]) // to prevent duplicate joins
}

model EventReport {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  reason    String
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model EventRSVP {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId]) // Prevent duplicate RSVP
}

model EventInvite {
  id           Int      @id @default(autoincrement())
  eventId      Int
  inviterId    Int
  inviteeEmail String
  event        Event    @relation(fields: [eventId], references: [id])
  inviter      User     @relation(fields: [inviterId], references: [id])
  createdAt    DateTime @default(now())
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("followers", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

// model JoinEvent {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   eventId   Int
//   createdAt DateTime @default(now())

//   // Relation to User (User model)
//   user User @relation(fields: [userId], references: [id])

//   // Relation to Event
//   event Event @relation(fields: [eventId], references: [id])

//   // Unique constraint to prevent duplicate joins
//   @@unique([userId, eventId]) // Ensure user can't join the same event more than once
// }

model Report {
  id               String   @id @default(uuid())
  reporterId       Int
  reportedItemId   Int
  reportedItemType String // "user", "event", "community", "post", "comment"
  reason           String
  status           String   @default("pending") // "pending", "reviewed", "resolved"
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  reporter User @relation("UserReports", fields: [reporterId], references: [id])
}

model ParticipationType {
  id                      Int      @id @default(autoincrement())
  personParticipationType String
  groupParticipationName  String
  priority                Int      @default(0)
  isVisibleInApp          Boolean  @default(true)
  isAllowedInEvent        Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relation to Event
  eventId Int
  event   Event     @relation(fields: [eventId], references: [id])
  Session Session[]
}

model SponsorType {
  id        Int      @id @default(autoincrement())
  type      String
  priority  Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Event
  eventId Int
  event   Event     @relation(fields: [eventId], references: [id])
  Session Session[]
}

model ExhibitorType {
  id        Int      @id @default(autoincrement())
  type      String
  priority  Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Event
  eventId Int
  event   Event @relation(fields: [eventId], references: [id])
}

model SessionType {
  id          Int      @id @default(autoincrement())
  sessionname String   @unique
  color       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to Event
  eventId Int
  event   Event     @relation(fields: [eventId], references: [id])
  Session Session[]
}

model Session {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?  @db.Text
  date           DateTime
  startTime      DateTime
  endTime        DateTime
  isSpeakathon   Boolean  @default(false)
  enableFeedback Boolean  @default(false)
  venue          String?
  hall           String?
  track          String?
  keywords       String? // comma-separated
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  sessionTypeId Int
  sessionType   SessionType @relation(fields: [sessionTypeId], references: [id])

  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  sponsorTypeId Int?
  sponsorType   SponsorType? @relation(fields: [sponsorTypeId], references: [id])

  sponsorName String?

  speakerId Int?
  speaker   User? @relation(fields: [speakerId], references: [id])

  participationTypeId Int?
  participationType   ParticipationType? @relation(fields: [participationTypeId], references: [id])
  AwardedPerson       AwardedPerson[]
}

model AwardType {
  id        Int      @id @default(autoincrement())
  awardType String   @unique
  priority  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Event
  eventId       Int
  event         Event           @relation(fields: [eventId], references: [id])
  AwardedPerson AwardedPerson[]
}

model AwardedPerson {
  id         Int      @id @default(autoincrement())
  eventId    Int
  sessionId  Int
  awardId    Int
  personName String
  action     Boolean  @default(true)
  createdAt  DateTime @default(now())

  event     Event     @relation(fields: [eventId], references: [id])
  session   Session   @relation(fields: [sessionId], references: [id])
  awardType AwardType @relation(fields: [awardId], references: [id])
}
