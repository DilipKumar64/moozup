generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  firstName      String?
  lastName       String?
  email          String    @unique
  password       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           String?   @default("user")
  status         Boolean   @default(true)
  profilePicture String?
  dateOfBirth    DateTime?
  gender         String?
  addressLine1   String?
  addressLine2   String?
  city           String?
  state          String?
  zipCode        String?
  phoneNumber    String?
  phoneExtension String?
  language       String?
  country        String?
  followersCount Int       @default(0)
  followingCount Int       @default(0)
  reports        Report[]  @relation("UserReports")

  hasLoggedIn       Boolean @default(false)
  hasPendingMeeting Boolean @default(false)
  isMember          Boolean @default(false)
  loginCount        Int     @default(0)

  // New fields addd when creating add people in directory
  companyName         String?
  jobTitle            String?
  facebookUrl         String?
  linkedinUrl         String?
  twitterUrl          String?
  webProfile          String?
  displayOrder        Int                @default(0)
  uid                 String? //@unique see later
  description         String?            @db.Text
  note                String?            @db.VarChar(500)
  participationTypeId Int?
  participationType   ParticipationType? @relation(fields: [participationTypeId], references: [id])

  events         Event[]
  // joinedEvents JoinEvent[]
  followers      Follow[]        @relation("followers")
  following      Follow[]        @relation("following")
  // Relations
  eventAttendees EventAttendee[] // Events joined
  createdEvents  Event[]         @relation("CreatedEvents") // Events created
  EventReport    EventReport[]
  EventRSVP      EventRSVP[]
  EventInvite    EventInvite[]
  Session        Session[]
  sponsors       Sponsor[]       @relation("SponsorPerson")
  exhibitors     Exhibitor[]     @relation("ExhibitorPerson")
  questions      Question[] // Added relation for questions
  pollResponses  PollResponse[] // Added relation for poll responses

  GalleryItem        GalleryItem[]
  staticContent      staticContent[]
  PublicationsItem   PublicationsItem[]
  FeatureTabSetting  FeatureTabSetting[]
  Collaborator       Collaborator[]
  EmailTemplate      EmailTemplate[]
  interestCategories InterestCategory[]
  interestAreas      InterestArea[]
}

model EventCategory {
  id           Int     @id @default(autoincrement())
  categoryName String? @db.VarChar(800)
  count        Int?

  events Event[]

  @@map("Event_Cateory") // Corrected typo in table name
}

model Event {
  id               Int      @id @default(autoincrement())
  eventName        String
  eventDescription String?  @db.Text
  eventStartDate   DateTime
  eventEndDate     DateTime
  startTime        String?
  endTime          String?
  eventLocation    String?
  latitude         Float?
  longitude        Float?
  moozupWebsite    String?
  eventWebsite     String?
  facebookId       String?
  facebookPageUrl  String?
  twitterId        String?
  twitterPageUrl   String?
  twitterHashtag   String?
  linkedInPageUrl  String?
  meraEventsId     String?
  ticketWidget     String?
  streamUrl        String?
  logo             String? // ✅ Added
  banner           String? // ✅ Added

  // Relations
  creatorId                 Int
  creator                   User                       @relation("CreatedEvents", fields: [creatorId], references: [id])
  categoryId                Int?
  category                  EventCategory?             @relation(fields: [categoryId], references: [id])
  eventAttendees            EventAttendee[] // Users who joined
  EventReport               EventReport[]
  EventRSVP                 EventRSVP[]
  EventInvite               EventInvite[]
  User                      User?                      @relation(fields: [userId], references: [id])
  userId                    Int?
  participationTypes        ParticipationType[] // Added relation for participation types
  sponsorTypes              SponsorType[] // Added relation for sponsor types
  exhibitorTypes            ExhibitorType[] // Added relation for exhibitor types
  SessionType               SessionType[] // Added relation for session types
  Session                   Session[]
  AwardType                 AwardType[]
  AwardedPerson             AwardedPerson[]
  galleryItems              GalleryItem[] // Added relation for gallery items
  staticContent             staticContent[]
  participationTypeSettings ParticipationTypeSetting[] // Added relation for participation type settings
  PublicationsItem          PublicationsItem[]
  FeatureTabSetting         FeatureTabSetting[]
  Collaborator              Collaborator[]
  EmailTemplate             EmailTemplate[]
  interestCategories        InterestCategory[]
  interestAreas             InterestArea[]
}

model EventAttendee {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  @@unique([userId, eventId]) // to prevent duplicate joins
}

model EventReport {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  reason    String
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model EventRSVP {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId]) // Prevent duplicate RSVP
}

model EventInvite {
  id           Int      @id @default(autoincrement())
  eventId      Int
  inviterId    Int
  inviteeEmail String
  event        Event    @relation(fields: [eventId], references: [id])
  inviter      User     @relation(fields: [inviterId], references: [id])
  createdAt    DateTime @default(now())
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("followers", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Report {
  id               String   @id @default(uuid())
  reporterId       Int
  reportedItemId   Int
  reportedItemType String // "user", "event", "community", "post", "comment"
  reason           String
  status           String   @default("pending") // "pending", "reviewed", "resolved"
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  reporter User @relation("UserReports", fields: [reporterId], references: [id])
}

model ParticipationTypeSetting {
  id                 Int      @id @default(autoincrement())
  eventId            Int
  sourceTypeId       Int // The source participation type (e.g., speaker)
  targetTypeId       Int // The target participation type (e.g., attendee)
  canViewProfile     Boolean  @default(false)
  canScheduleMeeting Boolean  @default(false)
  canSendMessage     Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  event      Event             @relation(fields: [eventId], references: [id])
  sourceType ParticipationType @relation("SourceType", fields: [sourceTypeId], references: [id])
  targetType ParticipationType @relation("TargetType", fields: [targetTypeId], references: [id])

  @@unique([eventId, sourceTypeId, targetTypeId])
}

model ParticipationType {
  id                      Int      @id @default(autoincrement())
  personParticipationType String
  groupParticipationName  String
  priority                Int      @default(0)
  isVisibleInApp          Boolean  @default(true)
  isAllowedInEvent        Boolean  @default(true)
  canVideo                Boolean  @default(true)
  canImage                Boolean  @default(true)
  canDocument             Boolean  @default(true)
  canMessage              Boolean  @default(true)
  canChat                 Boolean  @default(true)
  canAsk                  Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relation to Event
  eventId Int
  event   Event     @relation(fields: [eventId], references: [id])
  Session Session[]

  // Relation to User
  users User[]

  // Relations for settings
  sourceSettings ParticipationTypeSetting[] @relation("SourceType")
  targetSettings ParticipationTypeSetting[] @relation("TargetType")
}

model SponsorType {
  id        Int      @id @default(autoincrement())
  type      String
  priority  Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Event
  eventId  Int
  event    Event     @relation(fields: [eventId], references: [id])
  Session  Session[]
  sponsors Sponsor[] // Added relation for sponsors
}

model ExhibitorType {
  id        Int      @id @default(autoincrement())
  type      String
  priority  Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Event
  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  // Relation to Exhibitors
  exhibitors Exhibitor[]
}

model SessionType {
  id          Int      @id @default(autoincrement())
  sessionname String   @unique
  color       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to Event
  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  Session Session[]
}

model Session {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?   @db.Text
  date           DateTime
  startTime      String
  endTime        String
  isSpeakathon   Boolean   @default(false)
  enableFeedback Boolean   @default(false)
  venue          String?
  hall           String?
  track          String?
  keywords       String? // comma-separated
  isLive         Boolean   @default(false)
  wentLiveAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  sessionTypeId Int
  sessionType   SessionType @relation(fields: [sessionTypeId], references: [id])

  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  sponsorTypeId Int
  sponsorType   SponsorType @relation(fields: [sponsorTypeId], references: [id])

  sponsorName Int
  sponsor     Sponsor @relation(fields: [sponsorName], references: [id])

  speakerId Int
  speaker   User @relation(fields: [speakerId], references: [id])

  participationTypeId Int
  participationType   ParticipationType @relation(fields: [participationTypeId], references: [id])

  AwardedPerson AwardedPerson[]
  questions     Question[]
  polls         Poll[]
}

model AwardType {
  id        Int      @id @default(autoincrement())
  awardType String   @unique
  priority  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Event
  eventId       Int
  event         Event           @relation(fields: [eventId], references: [id])
  AwardedPerson AwardedPerson[]
}

model AwardedPerson {
  id         Int      @id @default(autoincrement())
  eventId    Int
  sessionId  Int
  awardId    Int
  personName String
  action     Boolean  @default(true)
  createdAt  DateTime @default(now())

  event     Event     @relation(fields: [eventId], references: [id])
  session   Session   @relation(fields: [sessionId], references: [id])
  awardType AwardType @relation(fields: [awardId], references: [id])
}

model Sponsor {
  id              Int      @id @default(autoincrement())
  name            String
  website         String?
  aboutCompany    String?  @db.VarChar(500)
  facebookPageUrl String?
  linkedinPageUrl String?
  twitterPageUrl  String?
  youtubeUrl      String?
  logo            String?
  displayOrder    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  sponsorTypeId Int
  sponsorType   SponsorType @relation(fields: [sponsorTypeId], references: [id])

  // Many-to-many relation with User
  sponsorPerson User[] @relation("SponsorPerson")

  // Documents array
  documents SponsorDocument[]
  Session   Session[]
}

model SponsorDocument {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  createdAt DateTime @default(now())

  // Relation to Sponsor
  sponsorId Int
  sponsor   Sponsor @relation(fields: [sponsorId], references: [id])
}

model Exhibitor {
  id              Int      @id @default(autoincrement())
  name            String
  website         String
  stall           String?
  location        String? // city
  aboutCompany    String?  @db.VarChar(500)
  email           String?
  phone           String?
  facebookPageUrl String?
  linkedinPageUrl String?
  twitterPageUrl  String?
  logo            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  exhibitorTypeId Int
  exhibitorType   ExhibitorType @relation(fields: [exhibitorTypeId], references: [id])

  // Many-to-many relation with User
  exhibitorPersons User[] @relation("ExhibitorPerson")

  // Documents array
  documents ExhibitorDocument[]
}

model ExhibitorDocument {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  createdAt DateTime @default(now())

  // Relation to Exhibitor
  exhibitorId Int
  exhibitor   Exhibitor @relation(fields: [exhibitorId], references: [id])
}

model GalleryGroup {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  galleryItems GalleryItem[]
}

model GalleryItem {
  id         Int      @id @default(autoincrement())
  imagelabel String?
  Videolabel String?
  imageUrl   String?
  videoUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  group   GalleryGroup? @relation(fields: [groupId], references: [id])
  groupId Int? // Changed to `Int?` to match `GalleryGroup`'s `id` field type
  eventId Int
  event   Event         @relation(fields: [eventId], references: [id])
  userId  Int
  user    User          @relation(fields: [userId], references: [id])
}

model staticContent {
  id        Int      @id @default(autoincrement())
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  FAQs                  String? @db.Text
  EventInfo             String? @db.Text
  Questionnaire         String? @db.Text
  StaticContent1        String? @db.Text
  StaticContent2        String? @db.Text
  StaticContent3        String? @db.Text
  StaticContent4        String? @db.Text
  StaticContent5        String? @db.Text
  StaticContent6        String? @db.Text
  StaticContent7        String? @db.Text
  NonMenuStaticContent1 String? @db.Text
  NonMenuStaticContent2 String? @db.Text
  NonMenuStaticContent3 String? @db.Text
  NonMenuStaticContent4 String? @db.Text
  NonMenuStaticContent5 String? @db.Text

  // Relation to Event
  eventId Int
  event   Event @relation(fields: [eventId], references: [id])
  // Relation to User
  userId  Int
  user    User  @relation(fields: [userId], references: [id])
}

model PublicationsGroup {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)

  // galleryItems GalleryItem[]
  PublicationsItem PublicationsItem[]
}

model PublicationsItem {
  id        Int      @id @default(autoincrement())
  message   String? // text field (Enter Message)
  fileUrl   String? // uploaded file (can be image, pdf, doc etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  publicationsGroup   PublicationsGroup? @relation(fields: [publicationsGroupId], references: [id])
  publicationsGroupId Int? // Changed to `Int?` to match `GalleryGroup`'s `id` field type
  eventId             Int
  event               Event              @relation(fields: [eventId], references: [id])
  userId              Int
  user                User               @relation(fields: [userId], references: [id])
}

model FeatureTabSetting {
  id         String   @id @default(uuid())
  EventTabs  String
  icon       String
  filledIcon String
  text       String
  action     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  // Relation to Event
  eventId Int

  event Event @relation(fields: [eventId], references: [id])
}

model Collaborator {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  role      String
  createdAt DateTime @default(now())

  // Relation to Event
  eventId Int
  event   Event @relation(fields: [eventId], references: [id])
  // Relation to User
  userId  Int
  user    User  @relation(fields: [userId], references: [id])
}

model EmailTemplate {
  id                  Int      @id @default(autoincrement())
  type                String // Type of email (e.g., "welcome", "password_reset")
  templateName        String
  emailSubject        String
  templateDescription String // Email HTML body
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relation to Event
  eventId Int?
  event   Event? @relation(fields: [eventId], references: [id])
  // Relation to User
  userId  Int?
  user    User?  @relation(fields: [userId], references: [id])
}

model InterestCategory {
  id            Int            @id @default(autoincrement())
  title         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdById   Int
  createdBy     User           @relation(fields: [createdById], references: [id])
  eventId       Int
  event         Event          @relation(fields: [eventId], references: [id])
  interestAreas InterestArea[]
}

model InterestArea {
  id                 Int              @id @default(autoincrement())
  title              String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  createdById        Int
  createdBy          User             @relation(fields: [createdById], references: [id])
  eventId            Int
  event              Event            @relation(fields: [eventId], references: [id])
  interestCategoryId Int
  interestCategory   InterestCategory @relation(fields: [interestCategoryId], references: [id])
}

model Question {
  id            Int      @id @default(autoincrement())
  content       String   @db.Text
  status        String   @default("pending") // pending, approved, declined
  editedContent String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sessionId Int
  session   Session @relation(fields: [sessionId], references: [id])
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
}

enum AnswerType {
  SINGLE
  MULTI
}

model Poll {
  id         Int            @id @default(autoincrement())
  question   String
  passCode   String?
  pollsLimit Int?
  answerType AnswerType
  show       Boolean        @default(false)
  sessionId  Int?
  session    Session?       @relation(fields: [sessionId], references: [id])
  options    Option[]
  responses  PollResponse[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Option {
  id        Int            @id @default(autoincrement())
  text      String
  poll      Poll           @relation(fields: [pollId], references: [id])
  pollId    Int
  responses PollResponse[]
}

model PollResponse {
  id        Int      @id @default(autoincrement())
  poll      Poll     @relation(fields: [pollId], references: [id])
  pollId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  option    Option   @relation(fields: [optionId], references: [id])
  optionId  Int
  createdAt DateTime @default(now())

  @@unique([pollId, userId, optionId]) // Prevent duplicate responses for the same option
}


model Contact {
  id             String   @id @default(uuid())
  participantType String?
  title           String?
  firstName       String
  lastName        String
  companyName     String?
  jobTitle        String?
  email           String   @unique
  phoneNumber     String?
  imageUrl        String?
  description     String?
  location        String?
  facebook        String?
  linkedin        String?
  twitter         String?
  webProfile      String?
  uid             String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
