generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("LOCAL_DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  firstName      String?
  lastName       String?
  email          String    @unique
  password       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           String?   @default("user")
  status         Boolean   @default(true)
  profilePicture String?
  dateOfBirth    DateTime?
  gender         String?
  addressLine1   String?
  addressLine2   String?
  city           String?
  state          String?
  zipCode        String?
  phoneNumber    String?
  phoneExtension String?
  language       String?
  country        String?
  followersCount Int       @default(0)
  followingCount Int       @default(0)
  reports          Report[]  @relation("UserReports")

  events Event[]
// joinedEvents JoinEvent[]
  followers      Follow[]  @relation("followers")
  following      Follow[]  @relation("following")
}

model EventCategory {
  id           Int     @id @default(autoincrement())
  categoryName String? @db.VarChar(800)
  count        Int?

  events Event[]
  @@map("Event_Cateory") // Corrected typo in table name

}

model Event {
  id                         Int       @id @default(autoincrement()) // EventId
  title                      String
  eventCategory              String?
  eventName                  String?
  eventDescription           String?  @db.Text
  logo                       String?
  banner                     String?
  eventStartDate             DateTime?
  eventEndDate               DateTime?
  isPrivateEvent             Boolean? @default(false)
  address1                   String?  @db.Text
  address2                   String?  @db.Text
  city                       String?
  state                      String?
  country                    String?
  zipCode                    String?
  hostOrganizationName       String?
  hostOrganizationDescription String?  @db.Text
  hostWebsiteUrl             String?
  eventUrl                   String?
  isActive                   Boolean? @default(true)
  isPublished                Boolean? @default(false)
  isFreeEvent                Boolean? @default(false)
  markDelete                 Boolean? @default(false)
  dateTimeCreated            DateTime? @default(now())
  createdBy                  Int?
  dateTimeModified           DateTime? @updatedAt
  modifiedBy                 Int?
  sponsorLogoPath            String?

  // Relations
  creatorId     Int
  creator       User          @relation(fields: [creatorId], references: [id])
  categoryId    Int?
  category      EventCategory? @relation(fields: [categoryId], references: [id])


}

model Follow {
  id           Int      @id @default(autoincrement())
  follower     User     @relation("following", fields: [followerId], references: [id])
  followerId   Int
  following    User     @relation("followers", fields: [followingId], references: [id])
  followingId  Int
  createdAt    DateTime @default(now())

  @@unique([followerId, followingId])
}

// model JoinEvent {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   eventId   Int
//   createdAt DateTime @default(now())

//   // Relation to User (User model)
//   user User @relation(fields: [userId], references: [id])

//   // Relation to Event
//   event Event @relation(fields: [eventId], references: [id])

//   // Unique constraint to prevent duplicate joins
//   @@unique([userId, eventId]) // Ensure user can't join the same event more than once
// }

model Report {
  id                String   @id @default(uuid())
  reporterId        Int
  reportedItemId    Int
  reportedItemType  String   // "user", "event", "community", "post", "comment"
  reason            String
  status            String   @default("pending") // "pending", "reviewed", "resolved"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  reporter          User     @relation("UserReports", fields: [reporterId], references: [id])
}

