generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserType {
  EVENT
  COMMUNITY
}

model User {
  id             Int       @id @default(autoincrement())
  firstName      String?
  lastName       String?
  email          String    @unique
  password       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           String?   @default("user")
  status         Boolean   @default(true)
  profilePicture String?
  dateOfBirth    DateTime?
  gender         String?
  addressLine1   String?
  addressLine2   String?
  city           String?
  state          String?
  zipCode        String?
  phoneNumber    String    @unique
  userType       UserType  @default(EVENT)
  phoneExtension String?
  language       String?
  country        String?
  followersCount Int       @default(0)
  followingCount Int       @default(0)
  reports        Report[]  @relation("UserReports")

  hasLoggedIn       Boolean @default(false)
  hasPendingMeeting Boolean @default(false)
  isMember          Boolean @default(false)
  loginCount        Int     @default(0)

  companyName String?
  jobTitle    String?
  facebookUrl String?
  linkedinUrl String?
  twitterUrl  String?
  webProfile  String?
  uid         String?

  followers      Follow[]        @relation("followers")
  following      Follow[]        @relation("following")
  // Relations
  eventAttendees EventAttendee[]
  createdEvents  Event[]         @relation("CreatedEvents")
  EventReport    EventReport[]
  EventRSVP      EventRSVP[]
  EventInvite    EventInvite[]
}

model EventCategory {
  id           Int     @id @default(autoincrement())
  categoryName String? @db.VarChar(800)
  count        Int?

  events Event[]

  @@map("Event_Cateory")
}

model Event {
  id                        Int                        @id @default(autoincrement())
  eventName                 String
  eventDescription          String?                    @db.Text
  eventStartDate            DateTime
  eventEndDate              DateTime
  startTime                 String?
  endTime                   String?
  eventLocation             String?
  latitude                  Float?
  longitude                 Float?
  moozupWebsite             String?
  eventWebsite              String?
  facebookId                String?
  facebookPageUrl           String?
  twitterId                 String?
  twitterPageUrl            String?
  twitterHashtag            String?
  linkedInPageUrl           String?
  meraEventsId              String?
  ticketWidget              String?
  streamUrl                 String?
  logo                      String?
  banner                    String?
  venueMap                  String?
  creatorId                 Int
  creator                   User                       @relation("CreatedEvents", fields: [creatorId], references: [id])
  categoryId                Int?
  category                  EventCategory?             @relation(fields: [categoryId], references: [id])
  eventAttendees            EventAttendee[]
  EventReport               EventReport[]
  EventRSVP                 EventRSVP[]
  EventInvite               EventInvite[]
  participationTypes        ParticipationType[]
  sponsorTypes              SponsorType[]
  exhibitorTypes            ExhibitorType[]
  SessionType               SessionType[]
  Session                   Session[]
  AwardType                 AwardType[]
  AwardedPerson             AwardedPerson[]
  galleryItems              GalleryItem[]
  staticContent             staticContent[]
  participationTypeSettings ParticipationTypeSetting[]
  PublicationsItem          PublicationsItem[]
  FeatureTabSetting         FeatureTabSetting[]
  Collaborator              Collaborator[]
  EmailTemplate             EmailTemplate[]
  interestCategories        InterestCategory[]
  interestAreas             InterestArea[]
}

model EventAttendee {
  id                  Int                  @id @default(autoincrement())
  user                User                 @relation(fields: [userId], references: [id])
  userId              Int
  event               Event                @relation(fields: [eventId], references: [id])
  eventId             Int
  displayOrder        Int                  @default(0)
  description         String?              @db.Text
  note                String?              @db.VarChar(500)
  participationTypeId Int
  participationType   ParticipationType?   @relation(fields: [participationTypeId], references: [id])
  sessions            Session[]
  sponsors            Sponsor[]            @relation("SponsorPerson")
  exhibitors          Exhibitor[]          @relation("ExhibitorPerson")
  questions           Question[]
  pollResponses       PollResponse[]
  galleryItems        GalleryItem[]
  staticContents      staticContent[]
  publicationsItems   PublicationsItem[]
  featureTabSettings  FeatureTabSetting[]
  collaborators       Collaborator[]
  emailTemplates      EmailTemplate[]
  interestCategories  InterestCategory[]
  interestAreas       InterestArea[]

  // News feature relations
  newsPosts          NewsPost[]
  newsPostLikes      NewsPostLike[]
  newsComments       NewsComment[]
  newsCommentLikes   NewsCommentLike[]

  @@unique([userId, eventId])
}

model EventReport {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  reason    String
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model EventRSVP {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model EventInvite {
  id           Int      @id @default(autoincrement())
  eventId      Int
  inviterId    Int
  inviteeEmail String
  event        Event    @relation(fields: [eventId], references: [id])
  inviter      User     @relation(fields: [inviterId], references: [id])
  createdAt    DateTime @default(now())
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("followers", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Report {
  id               String   @id @default(uuid())
  reporterId       Int
  reportedItemId   Int
  reportedItemType String
  reason           String
  status           String   @default("pending")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  reporter User @relation("UserReports", fields: [reporterId], references: [id])
}

model ParticipationTypeSetting {
  id                 Int      @id @default(autoincrement())
  eventId            Int
  sourceTypeId       Int
  targetTypeId       Int
  canViewProfile     Boolean  @default(false)
  canScheduleMeeting Boolean  @default(false)
  canSendMessage     Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  event      Event             @relation(fields: [eventId], references: [id])
  sourceType ParticipationType @relation("SourceType", fields: [sourceTypeId], references: [id])
  targetType ParticipationType @relation("TargetType", fields: [targetTypeId], references: [id])

  @@unique([eventId, sourceTypeId, targetTypeId])
}

model ParticipationType {
  id                      Int      @id @default(autoincrement())
  personParticipationType String
  groupParticipationName  String
  priority                Int      @default(0)
  isVisibleInApp          Boolean  @default(true)
  isAllowedInEvent        Boolean  @default(true)
  canVideo                Boolean  @default(true)
  canImage                Boolean  @default(true)
  canDocument             Boolean  @default(true)
  canMessage              Boolean  @default(true)
  canChat                 Boolean  @default(true)
  canAsk                  Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  eventId        Int
  event          Event           @relation(fields: [eventId], references: [id])
  Session        Session[]
  eventAttendees EventAttendee[]

  sourceSettings ParticipationTypeSetting[] @relation("SourceType")
  targetSettings ParticipationTypeSetting[] @relation("TargetType")
}

model SponsorType {
  id        Int      @id @default(autoincrement())
  type      String
  priority  Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventId  Int
  event    Event     @relation(fields: [eventId], references: [id])
  Session  Session[]
  sponsors Sponsor[]
}

model ExhibitorType {
  id        Int      @id @default(autoincrement())
  type      String
  priority  Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventId    Int
  event      Event       @relation(fields: [eventId], references: [id])
  exhibitors Exhibitor[]
}

model SessionType {
  id          Int      @id @default(autoincrement())
  sessionname String   @unique
  color       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  Session Session[]
}

model Session {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?   @db.Text
  date           DateTime
  startTime      String
  endTime        String
  isSpeakathon   Boolean   @default(false)
  enableFeedback Boolean   @default(false)
  venue          String?
  hall           String?
  track          String?
  keywords       String?
  isLive         Boolean   @default(false)
  wentLiveAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  sessionTypeId Int
  sessionType   SessionType @relation(fields: [sessionTypeId], references: [id])

  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  sponsorTypeId Int
  sponsorType   SponsorType @relation(fields: [sponsorTypeId], references: [id])

  sponsorName Int
  sponsor     Sponsor @relation(fields: [sponsorName], references: [id])

  speakerId Int
  speaker   EventAttendee @relation(fields: [speakerId], references: [id])

  participationTypeId Int
  participationType   ParticipationType @relation(fields: [participationTypeId], references: [id])

  AwardedPerson AwardedPerson[]
  questions     Question[]
  polls         Poll[]
}

model AwardType {
  id        Int      @id @default(autoincrement())
  awardType String   @unique
  priority  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventId       Int
  event         Event           @relation(fields: [eventId], references: [id])
  AwardedPerson AwardedPerson[]
}

model AwardedPerson {
  id         Int      @id @default(autoincrement())
  eventId    Int
  sessionId  Int
  awardId    Int
  personName String
  action     Boolean  @default(true)
  createdAt  DateTime @default(now())

  event     Event     @relation(fields: [eventId], references: [id])
  session   Session   @relation(fields: [sessionId], references: [id])
  awardType AwardType @relation(fields: [awardId], references: [id])
}

model Sponsor {
  id              Int      @id @default(autoincrement())
  name            String
  website         String?
  aboutCompany    String?  @db.VarChar(500)
  facebookPageUrl String?
  linkedinPageUrl String?
  twitterPageUrl  String?
  youtubeUrl      String?
  logo            String?
  displayOrder    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  sponsorTypeId Int
  sponsorType   SponsorType @relation(fields: [sponsorTypeId], references: [id])

  sponsorPersons EventAttendee[] @relation("SponsorPerson")

  documents SponsorDocument[]
  Session   Session[]
}

model SponsorDocument {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  createdAt DateTime @default(now())

  sponsorId Int
  sponsor   Sponsor @relation(fields: [sponsorId], references: [id])
}

model Exhibitor {
  id              Int      @id @default(autoincrement())
  name            String
  website         String
  stall           String?
  location        String?
  aboutCompany    String?  @db.VarChar(500)
  email           String?
  phone           String?
  facebookPageUrl String?
  linkedinPageUrl String?
  twitterPageUrl  String?
  logo            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  exhibitorTypeId Int
  exhibitorType   ExhibitorType @relation(fields: [exhibitorTypeId], references: [id])

  exhibitorPersons EventAttendee[] @relation("ExhibitorPerson")

  documents ExhibitorDocument[]
}

model ExhibitorDocument {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  createdAt DateTime @default(now())

  exhibitorId Int
  exhibitor   Exhibitor @relation(fields: [exhibitorId], references: [id])
}

model GalleryGroup {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  galleryItems GalleryItem[]
}

model GalleryItem {
  id          Int           @id @default(autoincrement())
  imagelabel  String?
  Videolabel  String?
  imageUrl    String?
  videoUrl    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  group       GalleryGroup? @relation(fields: [groupId], references: [id])
  groupId     Int?
  eventId     Int
  event       Event         @relation(fields: [eventId], references: [id])
  attendeeId  Int
  attendee    EventAttendee @relation(fields: [attendeeId], references: [id])
}

model staticContent {
  id                    Int           @id @default(autoincrement())
  content               String?       @db.Text
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  FAQs                  String?       @db.Text
  EventInfo             String?       @db.Text
  Questionnaire         String?       @db.Text
  StaticContent1        String?       @db.Text
  StaticContent2        String?       @db.Text
  StaticContent3        String?       @db.Text
  StaticContent4        String?       @db.Text
  StaticContent5        String?       @db.Text
  StaticContent6        String?       @db.Text
  StaticContent7        String?       @db.Text
  NonMenuStaticContent1 String?       @db.Text
  NonMenuStaticContent2 String?       @db.Text
  NonMenuStaticContent3 String?       @db.Text
  NonMenuStaticContent4 String?       @db.Text
  NonMenuStaticContent5 String?       @db.Text

  eventId   Int
  event     Event         @relation(fields: [eventId], references: [id])
  attendeeId  Int
  attendee    EventAttendee @relation(fields: [attendeeId], references: [id])
}

model PublicationsGroup {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)

  PublicationsItem PublicationsItem[]
}

model PublicationsItem {
  id                  Int                @id @default(autoincrement())
  message             String?
  fileUrl             String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  publicationsGroup   PublicationsGroup? @relation(fields: [publicationsGroupId], references: [id])
  publicationsGroupId Int?
  eventId             Int
  event               Event              @relation(fields: [eventId], references: [id])
  attendeeId          Int
  attendee            EventAttendee      @relation(fields: [attendeeId], references: [id])
}

model FeatureTabSetting {
  id         String   @id @default(uuid())
  EventTabs  String
  icon       String
  filledIcon String
  text       String
  action     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  attendeeId Int
  attendee   EventAttendee @relation(fields: [attendeeId], references: [id])
  eventId    Int
  event      Event         @relation(fields: [eventId], references: [id])
}

model Collaborator {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  role      String
  createdAt DateTime @default(now())

  eventId    Int
  event      Event         @relation(fields: [eventId], references: [id])
  attendeeId Int
  attendee   EventAttendee @relation(fields: [attendeeId], references: [id])
}

model EmailTemplate {
  id                  Int           @id @default(autoincrement())
  type                String
  templateName        String
  emailSubject        String
  templateDescription String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  eventId    Int?
  event      Event?        @relation(fields: [eventId], references: [id])
  attendeeId Int?
  attendee   EventAttendee? @relation(fields: [attendeeId], references: [id])
}

model InterestCategory {
  id            Int            @id @default(autoincrement())
  title         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdById   Int
  createdBy     EventAttendee  @relation(fields: [createdById], references: [id])
  eventId       Int
  event         Event          @relation(fields: [eventId], references: [id])
  interestAreas InterestArea[]
}

model InterestArea {
  id                 Int              @id @default(autoincrement())
  title              String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  createdById        Int
  createdBy          EventAttendee    @relation(fields: [createdById], references: [id])
  eventId            Int
  event              Event            @relation(fields: [eventId], references: [id])
  interestCategoryId Int
  interestCategory   InterestCategory @relation(fields: [interestCategoryId], references: [id])
}

model Question {
  id            Int      @id @default(autoincrement())
  content       String   @db.Text
  status        String   @default("pending")
  editedContent String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessionId  Int
  session    Session       @relation(fields: [sessionId], references: [id])
  attendeeId Int
  attendee   EventAttendee @relation(fields: [attendeeId], references: [id])
}

enum AnswerType {
  SINGLE
  MULTI
}

model Poll {
  id         Int            @id @default(autoincrement())
  question   String
  passCode   String?
  pollsLimit Int?
  answerType AnswerType
  show       Boolean        @default(false)
  sessionId  Int?
  session    Session?       @relation(fields: [sessionId], references: [id])
  options    Option[]
  responses  PollResponse[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Option {
  id        Int            @id @default(autoincrement())
  text      String
  poll      Poll           @relation(fields: [pollId], references: [id])
  pollId    Int
  responses PollResponse[]
}

model PollResponse {
  id         Int           @id @default(autoincrement())
  poll       Poll          @relation(fields: [pollId], references: [id])
  pollId     Int
  attendeeId Int
  attendee   EventAttendee @relation(fields: [attendeeId], references: [id])
  option     Option        @relation(fields: [optionId], references: [id])
  optionId   Int
  createdAt  DateTime      @default(now())

  @@unique([pollId, attendeeId, optionId])
}

model Contact {
  id              String   @id @default(uuid())
  participantType String?
  title           String?
  firstName       String
  lastName        String
  companyName     String?
  jobTitle        String?
  email           String   @unique
  phoneNumber     String?
  imageUrl        String?
  description     String?
  location        String?
  facebook        String?
  linkedin        String?
  twitter         String?
  webProfile      String?
  uid             String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model NewsPost {
  id          Int              @id @default(autoincrement())
  description String?
  images      String[]         // Array of image URLs (max 10, enforced in controller)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  attendeeId  Int
  attendee    EventAttendee    @relation(fields: [attendeeId], references: [id])
  likes       NewsPostLike[]
  shares      Int              @default(0)
  comments    NewsComment[]
}

model NewsPostLike {
  id         Int           @id @default(autoincrement())
  postId     Int
  post       NewsPost      @relation(fields: [postId], references: [id])
  attendeeId Int
  attendee   EventAttendee @relation(fields: [attendeeId], references: [id])
  createdAt  DateTime      @default(now())

  @@unique([postId, attendeeId])
}

model NewsComment {
  id            Int              @id @default(autoincrement())
  postId        Int
  post          NewsPost         @relation(fields: [postId], references: [id])
  attendeeId    Int
  attendee      EventAttendee    @relation(fields: [attendeeId], references: [id])
  content       String
  parentId      Int?             // null for top-level, set for replies
  parent        NewsComment?     @relation("CommentReplies", fields: [parentId], references: [id])
  replies       NewsComment[]    @relation("CommentReplies")
  likes         NewsCommentLike[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model NewsCommentLike {
  id         Int           @id @default(autoincrement())
  commentId  Int
  comment    NewsComment   @relation(fields: [commentId], references: [id])
  attendeeId Int
  attendee   EventAttendee @relation(fields: [attendeeId], references: [id])
  createdAt  DateTime      @default(now())

  @@unique([commentId, attendeeId])
}
